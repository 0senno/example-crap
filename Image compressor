import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image
import os
import logging

logging.basicConfig(filename="image_compressor.log", 
                    level=logging.INFO, 
                    format="%(asctime)s - %(levelname)s - %(message)s")


class ImageCompressorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Image Compressor")
        self.root.geometry("500x400")
        self.root.resizable(False, False)

        self.create_widgets()

    def create_widgets(self):
        header_label = tk.Label(self.root, text="Advanced Image Compressor", font=("Arial", 18))
        header_label.pack(pady=10)

        quality_frame = tk.Frame(self.root)
        quality_frame.pack(pady=10)
        quality_label = tk.Label(quality_frame, text="Compression Quality (1-100): ", font=("Arial", 12))
        quality_label.pack(side=tk.LEFT)
        self.quality_var = tk.IntVar(value=85)
        quality_entry = tk.Entry(quality_frame, textvariable=self.quality_var, width=5)
        quality_entry.pack(side=tk.LEFT)

        resize_frame = tk.Frame(self.root)
        resize_frame.pack(pady=10)
        resize_label = tk.Label(resize_frame, text="Resize (Width x Height): ", font=("Arial", 12))
        resize_label.pack(side=tk.LEFT)
        self.resize_width_var = tk.IntVar()
        self.resize_height_var = tk.IntVar()
        width_entry = tk.Entry(resize_frame, textvariable=self.resize_width_var, width=5)
        width_entry.pack(side=tk.LEFT)
        height_entry = tk.Entry(resize_frame, textvariable=self.resize_height_var, width=5)
        height_entry.pack(side=tk.LEFT)

        format_frame = tk.Frame(self.root)
        format_frame.pack(pady=10)
        format_label = tk.Label(format_frame, text="Convert to Format (JPEG/PNG): ", font=("Arial", 12))
        format_label.pack(side=tk.LEFT)
        self.format_var = tk.StringVar(value="JPEG")
        format_entry = tk.Entry(format_frame, textvariable=self.format_var, width=10)
        format_entry.pack(side=tk.LEFT)

        self.select_button = tk.Button(self.root, text="Select Images", command=self.select_images, font=("Arial", 12))
        self.select_button.pack(pady=20)

        self.compress_button = tk.Button(self.root, text="Compress and Save Images", command=self.compress_images, font=("Arial", 12), state=tk.DISABLED)
        self.compress_button.pack(pady=10)

        self.progress = ttk.Progressbar(self.root, orient="horizontal", length=300, mode="determinate")
        self.progress.pack(pady=10)

    def select_images(self):
        """Open a file dialog to select multiple images."""
        self.filepaths = filedialog.askopenfilenames(title="Select Images", filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")])
        if self.filepaths:
            self.compress_button.config(state=tk.NORMAL)
            messagebox.showinfo("Success", f"Selected {len(self.filepaths)} images.")

    def compress_images(self):
        """Compress the selected images and allow the user to choose where to save them."""
        try:
            quality = self.quality_var.get()
            new_format = self.format_var.get().upper()
            resize_width = self.resize_width_var.get()
            resize_height = self.resize_height_var.get()
            total_files = len(self.filepaths)
            self.progress["value"] = 0
            self.progress["maximum"] = total_files

            for i, filepath in enumerate(self.filepaths):
                self.compress_and_save_image(filepath, quality, new_format, resize_width, resize_height)
                self.progress["value"] += 1
                self.root.update_idletasks()

            messagebox.showinfo("Success", "Compression and saving completed!")
            logging.info("Image compression and saving completed.")
        except Exception as e:
            logging.error(f"Error during compression: {e}")
            messagebox.showerror("Error", f"An error occurred: {e}")

    def compress_and_save_image(self, filepath, quality, new_format, resize_width, resize_height):
        """Compress and save a single image with user-defined settings."""
        try:
            img = Image.open(filepath)
            original_size = os.path.getsize(filepath)

            if resize_width > 0 and resize_height > 0:
                img = img.resize((resize_width, resize_height), Image.ANTIALIAS)

            
            base_filename = os.path.basename(filepath)
            base, ext = os.path.splitext(base_filename)

            
            output_path = filedialog.asksaveasfilename(
                title=f"Save {base_filename} as",
                defaultextension=f".{new_format.lower()}",
                filetypes=[(f"{new_format} files", f"*.{new_format.lower()}")]
            )

            if not output_path:  # If the user cancels the save dialog
                return

            # Convert image to RGB if JPEG (JPEG does not support transparency)
            if new_format == "JPEG":
                img = img.convert("RGB")

            
            img.save(output_path, format=new_format, quality=quality, optimize=True)

            compressed_size = os.path.getsize(output_path)

            # Log the compression details
            logging.info(f"Compressed '{base_filename}': {original_size/1024:.2f} KB -> {compressed_size/1024:.2f} KB (Quality: {quality}, Format: {new_format})")

        except Exception as e:
            logging.error(f"Error compressing {filepath}: {e}")
            messagebox.showerror("Error", f"Failed to compress and save {os.path.basename(filepath)}: {e}")


def main():
    root = tk.Tk()
    app = ImageCompressorApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()
